import org.zenframework.z8.base.table.Table;
import org.zenframework.z8.base.table.value.DateField;
import org.zenframework.z8.base.table.value.Field;
import org.zenframework.z8.base.table.value.IntExpression;
import org.zenframework.z8.base.table.value.IntField;
import org.zenframework.z8.base.table.value.Link;
import org.zenframework.z8.base.table.value.StringExpression;
import org.zenframework.z8.base.table.value.BoolExpression;
import org.zenframework.z8.base.table.value.StringField;
import org.zenframework.z8.lang.Math;

import org.zenframework.z8.library.model.User;
import org.zenframework.z8.library.model.JournalСhange;

[generatable]
[name "Task"]
public class Task extends Table {
	
	// Три поля статуса задачи
	public static final int NewTask = 0;
	public static final int TaskInWork = 1;
	public static final int TaskFinished = 2;
	
	[name "ID"]
	[displayName "Идентификатор задачи"]
	public StringField taskId;
	taskId.defaultValue = (Math.random()*10000).round().toString();
		
	public Project project;
	[name "Project"] public Link projectId = project;
	
	public TaskType type;
	[name "Type"] public Link typeId = type;
	
	public User userCreated;
	[name "UserCreated"] public Link userCreatedId = userCreated;
	
	public User userExecuted;
	[name "UserExecuted"] public Link userExecutedId = userExecuted;
		
	[name "Complexity"]
	[displayName "Сложность задачи"]
	public IntField complexity; 
	
	[name "Date"]
	[displayName "Дата исполнения"]
	public DateField finishedAt;
	
	[name "FactDate"]
	[displayName "Дата фактического выполнения"]
	public DateField factFinishedAt;
		
	// Работаем со статусом в зависимости от поля type и пользователь мог сам выбирать
	public IntExpression status = (type.name == "Новая задача").IIF(NewTask, (type.name == "Задача в работе").IIF(TaskInWork, TaskFinished));
	
	[displayName "Наименование задачи (Проект)"]
	public StringExpression taskProject = name + " (" + project.name + ")";
	
	[displayName "Завершена"]
	public BoolExpression finished = (status == TaskFinished).IIF(true, false);
	
	// В этом методе, когда пользователь выбирает завершить задачу мы обновляем фактическую дату
	public void finishedTask(guid recordId) {
		if (!readRecord(recordId, Field[] { this.status, this.factFinishedAt }))
			throw "Запись '" + recordId + "' не существует";
		
		if (this.status.get() == TaskFinished) { 
			this.factFinishedAt = date.now();
			update(recordId);	
		} else {
			this.factFinishedAt = date.Min;
			update(recordId);	
		} 
	}
		
	// Метод для логирования изменений в таблице по задачам
	public void logTask(guid recordId) {
		if (!readRecord(recordId, Field[] { this.taskId, this.name }))
			throw "Запись '" + recordId + "' не существует";
		
		JournalСhange journalСhange;
		// Через класс query создать запись в таблице
		// create()
		journalСhange.name = this.name;
		journalСhange.dateChanges = date.now();
		journalСhange.userChanged = user().login;
	}
	
	// При обновлении записи, в случае завершения задачи,
	// проставляем фактическую дату
	virtual protected void onUpdateAction(guid recordId) {
		super.onUpdateAction(recordId);
		finishedTask(recordId);
		logTask(recordId);
	}
	
}